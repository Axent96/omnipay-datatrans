<?php

namespace Omnipay\Datatrans\Message;

/**
 * w-vision
 *
 * LICENSE
 *
 * This source file is subject to the MIT License
 * For the full copyright and license information, please view the LICENSE.md
 * file that are distributed with this source code.
 *
 * @copyright  Copyright (c) 2016 Woche-Pass AG (http://www.w-vision.ch)
 * @license    MIT License
 */

use Exception;

class CompleteRequest extends AbstractRequest
{
    /**
     * @return array
     */
    public function getData()
    {
        // The results could be sent by GET or POST. It's an account
        // or request option.

        if (strtoupper($this->httpRequest->getMethod()) === 'POST') {
            return $this->httpRequest->request->all();
        } else {
            return $this->httpRequest->query->all();
        }
    }

    protected function getDataItem($name, $default = null)
    {
        if (array_key_exists($name, $this->getData())) {
            return $this->getData()[$name];
        }

        return $default;
    }

    /**
     * TODO: PaypalOrderId=get adds a string
     * TODO: uppAliasOnly=true adds a string
     * @param string $sign2 the signature generated by the gateway.
     * @throws Exception
     */
    public function assertSignature()
    {
        if ($this->getDataItem('status') !== 'success') {
            // The sign2 signature is only provided if the result is a success.
            // This is NOT documented so far as I can see.
            // This seems a little crazy to me, but so long as you use an SSL connection in
            // all directions, there should be little chance of a man-in-the-middle attack.

            return;
        }

        $sign2 = $this->getDataItem('sign2', '');

        // The signature will have been generated by either the sign2 or the sign key.

        $key = $this->getHmacKey();

        $data = [
            $this->getDataItem('merchantId', ''),
            $this->getDataItem('amount', ''),
            $this->getDataItem('currency', ''),
            $this->getDataItem('uppTransactionId', ''),
        ];

        $calculatedSign2 = hash_hmac('SHA256', implode('', $data), hex2bin($key));

        $isValid = ($sign2 === $calculatedSign2);

        if (! $isValid) {
            throw new Exception(sprintf(
                'The "sign2" signature of this message from the gateway is invalid; expecting "%s" got "%s"',
                $calculatedSign2,
                $sign2
            ));
        }
    }

    /**
     * @return ResponseInterface
     */
    public function send()
    {
        if ($key = $this->getHmacKey()) {
            $this->assertSignature();
        }

        return $this->sendData($this->getData());
    }

    /**
     * Send the request with specified data
     *
     * @param  mixed $data The data to send
     * @return ResponseInterface
     */
    public function sendData($data)
    {
        return $this->response = new CompleteResponse($this, $data);
    }
}
